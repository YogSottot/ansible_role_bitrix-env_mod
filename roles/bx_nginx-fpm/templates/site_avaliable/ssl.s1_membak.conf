# Ansible managed
#########################################################
# configuration for https-site:
# site_name:                 default
# site_root:                 /home/bitrix/www
# site_composite:            enable
# site_composite_id:         02
# site_composite_var:        $is_site_composite_02
# site_composite_storage:    memcached
# site_composite_memcached:  unix:///tmp/memcached.sock:11211
# web_cluster:               disable
##########################################################
server {
    listen 443 default_server http2;
    server_name _;

    access_log /var/log/nginx/default_access.log main;
    error_log  /var/log/nginx/default_error.log warn;
  
  # Enable SSL connection
        include bx/conf/ssl.conf;
    
 
    set $docroot		"/home/bitrix/www";
    root            "/home/bitrix/www";
    proxy_ignore_client_abort off;
    index index.php;
  
    server_name_in_redirect off;
    set $php_sock  unix:/var/run/php-fpm/www.socket;
    
    
    memcached_connect_timeout 1s;
    memcached_read_timeout 1s;
    memcached_send_timeout 1s;
    memcached_gzip_flag 65536;
    set $memcached_key "/${host}${composite_key}/index@${args}.html";
    
    # config file
    set $composite_enabled  "${docroot}/bitrix/html_pages/.enabled";
    # if test pass through general tests:
    set $use_composite_cache "";
    # global site test, the same for all sites on the server
    if ($is_global_composite  = 1) {set $use_composite_cache "A";}
    # personal site tests, generated by site config
    if ($is_site_composite_02 = 1) {set $use_composite_cache "${use_composite_cache}B";}

    # Include parameters common to all websites
    include bx/conf_fpm/bitrix_general.conf;

    # main location with processing composite
    location / {
        error_page 404 405 412 502 504 = @bitrix;
        
        if (-f $composite_enabled)     { set $use_composite_cache "${use_composite_cache}C"; }
    
        default_type text/html;
        # use mecached for keys
        if ($use_composite_cache = "ABC") { 
        add_header X-Bitrix-Composite "Nginx (memcached)";
        memcached_pass unix:///tmp/memcached.sock:11211;
        }
        try_files  @bitrix =404;
        #try_files  $uri  @bitrix;

    }

#    location @apache {
#        proxy_pass $proxyserver;
#    }
    
    # Include munin and nagios web
    include bx/server_monitor.conf;
}

# apache|php-fpm upstream
set $backend "127.0.0.1:8080";
#### /user defined variables

set $storedAuth "";
set $usecache "";

# check all conditions for enable composite
if ( $http_bx_action_type = "" )     { set $usecache "A"; }
if ( $request_method = "GET" ) { set $usecache "${usecache}B"; }
if ( $cookie_BITRIX_SM_NCC = "" ) { set $usecache "${usecache}C"; }
if ( $http_x_forwarded_scheme !~ "https" ){ set $usecache "${usecache}D"; }
if ( $http_accept_encoding ~* "deflate" ){ set $usecache "${usecache}E"; }

# IE9 and above exclude
modern_browser_value "modern";
modern_browser msie 10.0;
modern_browser unlisted;
if ($modern_browser) {
   set $usecache "${usecache}F";
}

# check user auth
if ( $cookie_BITRIX_SM_LOGIN != "" ) { set $storedAuth "A"; }
if ( $cookie_BITRIX_SM_UIDH != "" ) { set $storedAuth "${storedAuth}B"; }
if ( $cookie_BITRIX_SM_CC != "Y" ) { set $storedAuth "${storedAuth}C"; }
if ( $storedAuth !~ "ABC" ) { set $usecache "${usecache}G"; }

memcached_connect_timeout 1s;
memcached_read_timeout 1s;
memcached_send_timeout 1s;

# use default cache file
location / {
   error_page 404 405 412 502 504 = @apache;
   if ($usecache != "ABCDEFG" ) { return 412; }

   default_type text/html;
   set $memcached_key "/$host$uri@$args.html";
   if ($uri ~ "/$")
   {
      set $memcached_key "/$host${uri}index@$args.html";
   }

   add_header Content-Encoding deflate;
   memcached_pass localhost:11211;
}

location ~* ^(.*)\.php$ {
   error_page 404 405 412 502 504 = @apache;
   if ($usecache != "ABCDEFG" ) { return 412; }

   default_type text/html;
   set $memcached_key "/$host$1@$args.html";
   add_header Content-Encoding deflate;
   memcached_pass localhost:11211;
}

# apache location
location @apache {
   proxy_pass http://$backend;
}